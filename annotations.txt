Curso:
React 19 e Next.js 15 com App Router, Server Actions, Server Components, Tailwind CSS, TypeScript e Rest API com NestJS

Seção 4:
NestJS 11 para Rest API com autenticação JWT - Back-end para Blog em Next.js

Aula:
242. Protegendo rotas com JwtAuthGuard personalizado (JWT + NestJS)

O que compreendi dessa aula?

Primeiro, foi criado um 'AuthGuard' personalizado (JwtAuthGuard) para modificar algumas informações
dessa classe no meio da sua execução (arquivo jwt-auth.guard.ts).

Segundo, por meio do uso desse 'JwtAuthGuard' é possível ter acesso aos dados do usuário
por conta do método obrigatório 'validate' na implementação do JWT strategy.

Entretanto, o 'express', que é o servidor de requisições HTTP usado por debaixo dos panos nesse projeto
possibilita o acesso a esses dados do usuário (objeto 'user') que fica dentro da requisição.

Porém, é possível extender a interface 'Request' do 'express' e definir o tipo do objeto 'user' com base
na Entity criada anteriormente. Isso evita erros de tipagem quando for usado esse objeto em alguma rota "fechada".

Resumindo, quando for usada a combinação [arquivo 'controller']:

@UseGuards(JwtAuthGuard) <---
@Get(':id')
findOne(
  @Req() req: AuthenticatedRequest, <---
  @Param('id', CustomParseInPipe) id: number,
) {
  console.log(req.user.email); <---
  return `Olá UserController!, id:${id}`;
}

É importante usar a interface 'AuthenticatedRequest' para que o objeto user siga a tipagem
definida na Entity User.
